#!/usr/bin/env ruby

# ln -s $HOME/rrs/rogue /usr/local/bin/rogue

require 'colorize'
require 'readline'
require 'FileUtils'

HOME = %x(echo $HOME).chomp
PROJECT_ROOT = HOME + '/rrs/'
STAGING_DIR = HOME + '/Desktop/rrs_staging/'

def make_a_selection(question, selections, prompt)
  puts "\n#{question}\n".colorize(:green)
  selections.each_with_index { |s,i| puts "#{i + 1}: #{s.to_s.split('_').map(&:capitalize).join(' ').colorize(:light_blue)}" }
  invalid_answer, index = true, nil
  while invalid_answer do
    index = prompt(prompt, :yellow).to_i - 1
    invalid_answer = false if index != -1 && selections[index]
  end
  puts "\n"
  selections[index]
end

def add_post
  info = {}
  details = { year: nil, make: nil, model: nil, mileage: nil, price: nil }
  puts "\n"
  info[:categories] = make_a_selection('Pick a category', valid_categories, 'category')
  info[:title] = ask_question(:title,true)
  info[:dashed_title] = dashed_title(info[:title])
  details.each { |question, _answer| details[question] = ask_question(question,true) }
  info[:details] = details
  info[:description] = ask_question(:description)
  proceed = [
    ask_question('Is all of the information above correct?[yes/no]')[0].downcase == 'y',
    ask_question('Are all of your photos staged? [yes/no]')[0] == 'y'
  ]
  if proceed.all?
    stage_photos(info[:dashed_title])
    write_post(info)
  else
    puts "\nLet's try that again."
    add_post
  end
end

def dashed_title(title)
  title.gsub(/\s/,'-').gsub(/[^A-Za-z0-9_-]/,'').downcase
end

def ask_question(question,confirm=false)
  answer = validate(question, Readline.readline("[#{question.to_s.colorize(:yellow)}]>> "))
  puts "\n#{"#{question}:".to_s.colorize(:green)} #{answer.to_s.colorize(:red)}\n\n" if confirm && !answer.nil?
  answer
end

def validate(question, answer)
  if [:title, :categories].include? question
    if answer.empty?
      puts "You need to have a #{question}"
      return validate(question, Readline.readline("[#{question.to_s.colorize(:yellow)}]>> "))
    end
  else
    return nil if answer.empty?
  end

  case question
  when :year
    return answer if answer.match(/^((20)|1(8|9))\d{2}(\.\d{1,2})?$/) && (answer.to_i <= Time.now.strftime('%Y').to_i + 2)
    puts 'That\'s not a valid date. Try agian.'
    ask_question(:year)
  when [:title, :make, :model].include?(question) ? question : false
    answer.gsub(/\s+/, ' ').split(' ').map { |w| w.capitalize }.join(' ')
  when :mileage
    "#{answer.gsub(/\.\d*/, '').gsub(/(k|k)/,'000').gsub(/\D/,'').reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} miles"
  when :price
    "$#{answer.gsub(/\.\d*/, '').gsub(/\D/,'').reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
  when :categories
    validate_categories(answer)
  else
    answer
  end
end

def validate_categories(categories)
  attempted_categories = categories.gsub(/,\s*/,',').split(',').map { |cat| cat.gsub(/\s/,'_') }
  if !attempted_categories.empty? && (valid_categories & attempted_categories).length == attempted_categories.length
    attempted_categories.join(' ')
  else
    puts 'Your categories aren\'t valid.'
    puts 'If you are using two or more categories, they must be seperated by a comma'
    puts "Valid categories are: " + "#{valid_categories.join(', ').gsub('_', ' ')}".colorize(:green)
    puts 'Try again'
    validate_categories(Readline.readline("[#{'categories'.colorize(:yellow)}]>> "))
  end
end

def valid_categories
  valid_categories = Dir[PROJECT_ROOT + '*'].map do |f|
    md = f.match(/\d_(.*)\.md/)
    md ? md[1] : nil
  end.compact
  valid_categories << 'unpublished'
end

def imagemagick(file, percent)
  %x(convert -strip -interlace Plane -gaussian-blur 0.05 -quality #{percent}% #{file} #{file})
end

def stage_photos(dashed_title, source_dir=STAGING_DIR)
  img_dir = "#{PROJECT_ROOT}images/#{dashed_title}/"
  FileUtils.mkdir_p(img_dir)
  puts 'Processing images, please wait...'
  require 'pry' ; binding.pry
  Dir[source_dir + '*'].each_with_index do |f,i|
    ext = f.match(/(\..*)$/)
    file = "#{img_dir}/#{dashed_title}-#{i+1}#{ext}"
    File.rename(f, file)
    percent = 50000000 / File.stat(file).size
    if percent < 80 && source_dir == STAGING_DIR
      imagemagick(file,percent)
    end
  end
end

def write_post(info)
  date_str = Time.now.strftime("%Y-%m-%d")
  new_post = "#{PROJECT_ROOT}_posts/#{ info[:details][:date] || date_str}-#{info[:dashed_title]}.markdown"
  content = [
    '---',
    'layout: post',
    "categories: #{info[:categories]}",
    "title: #{info[:title]}",
    "dashed_title: #{info[:dashed_title]}",
    'details:',
    "\s\sdate: #{date_str}"
  ]
  info[:details].each { |k,v| content << "\s\s#{k.to_s.gsub('_', ' ')}: #{v}" if v && (k != :date) }
  content << '---'
  content << info[:description]
  content_str = content.compact.join("\n")
  File.open(new_post, "w") do |file|
    file.write(content_str)
  end
end

def posts_by_category(category)
  matched_posts = []
  posts = Dir[PROJECT_ROOT + '_posts/*']
  posts.each do |post|
    match = false
    matched_posts << File.readlines(post).each_with_object({}) do |line, hash|
      if match
          md = line.match(/^(title|dashed_title):\s(.*)$/)
          hash[md[1].to_sym] = md[2] if md
      end
      match = true if line.match(/categories:\s*.*#{category}/)
    end
  end
  matched_posts.delete({})
  matched_posts
end


def edit_or_remove_post(edit_or_remove)
  category = make_a_selection('What category is the post listed under?', valid_categories, 'category')
  posts = posts_by_category(category)
  post_title = make_a_selection("Which post would you like to #{edit_or_remove}?", posts.map { |p| p[:title] }, 'post')
  post = posts.select { |h| h[:title] == post_title }.first
  if edit_or_remove == 'remove'
    delete_post(post[:dashed_title])
  elsif edit_or_remove == 'edit'
    edit_post(post[:dashed_title])
  end
end

def edit_post(dashed_title)
  file = Dir[PROJECT_ROOT + "_posts/*#{dashed_title}.*"].first
  details = false
  info = File.readlines(file).each_with_object({details: {}}) do |l, o|
    if md = l.match(/(.*title):\s(.*)/)
      o[:title] = md[2] if md[1] == 'title'
      o[:dashed_title] = md[2] if md[1] == 'dashed_title'
    end
    if details and l[0..1] == '  '
      md = l.match(/^\s{2}(.*):\s(.*)/)
      o[:details][md[1].to_sym] = md[2] unless md[1] == 'date'
    else
      details = false
    end
    details = true if l.match(/details:\s(.*)/)
  end
  keys = (info.keys << info[:details].keys).flatten
  keys.delete(:details); keys.delete(:details)
  keys << :add_attribute
  attribute = make_a_selection('What would you like to modify?', keys, 'attribute')
  if attribute == :title
    old_dashed_title = info[:dashed_title]
    puts "The title is currently:\n\n#{info[:title].colorize(:red)}"
    title = prompt("new title")
    new_dashed_title = dashed_title(title)
    old_image_dir = PROJECT_ROOT + "images/#{old_dashed_title}/"
    stage_photos(new_dashed_title, old_image_dir)
    delete_post(old_dashed_title)
    info[:dashed_title] = new_dashed_title
  elsif attribute == :add_attribute
    attribute_name = prompt('attribute name').gsub(' ', '_').downcase.to_sym
    info[:details][attribute_name] = prompt('attribue value')
  else
    puts "The #{attribute.to_s.gsub('_', ' ')} is currently:\n\n#{info[attribute].colorize(:red) if info[:details][attribute]}"
    info[:details][attribute] = prompt("new #{attribute}")
  end
  write_post(info)
end

def delete_post(dashed_title)
  FileUtils.rm_rf(PROJECT_ROOT + "images/#{dashed_title}")
  File.delete(Dir[PROJECT_ROOT + "_posts/*#{dashed_title}.*"].first)
end

def prompt(value, color=:yellow)
  Readline.readline("\n[#{"#{value}".colorize(color)}]>> ")
end

def deploy_site
  %x(git -C #{PROJECT_ROOT} pull origin master)
  %x(git -C #{PROJECT_ROOT} commit -am 'Rogue commit')
  %x(git -C #{PROJECT_ROOT} push origin master)
end


def add_or_remove_photos
  puts ''
end



def make_selection
  selection = make_a_selection(
    'What would you like to do?',
    [
      :add_a_new_post,
      :edit_an_existing_post,
      :remove_an_existing_post,
      :add_or_remove_photos_from_an_existing_post,
      :deploy_the_website
    ],
  'input'
  )
  case selection
  when :add_a_new_post
    add_post
  when :edit_an_existing_post
    edit_or_remove_post('edit')
  when :remove_an_existing_post
    edit_or_remove_post('remove')
  when :add_or_remove_photos_from_an_existing_post
    add_or_remove_photos
  when :deploy_the_website
    puts 'deploy site'
    # deploy_site
  else
    puts "\nI don't understand, try again.\n"
    make_selection
  end
end

make_selection
puts 'finished'
