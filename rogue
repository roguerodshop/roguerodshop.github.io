#!/usr/bin/env ruby

# ln -s $HOME/rrs/rogue /usr/local/bin/rogue

require 'colorize'
require 'readline'

HOME = %x(echo $HOME).chomp
PROJECT_ROOT = HOME + '/rrs/'
STAGING_DIR = HOME + '/Desktop/rrs_staging/'

selections = [
  'Add a new post',
  'Edit an existing post',
  'Remove an existing post',
  'Add or remove photos from an existing post',
  'Deploy the website'
]

puts "\nWhat would you like to do?\n".colorize(:green)
selections.each_with_index { |s,i| puts "#{i+1}: #{s.colorize(:light_blue)}" }

def add_posting
  info = {}
  details = { year: nil, make: nil, model: nil, mileage: nil, price: nil }
  puts "\n"
  info[:categories] = select_categories
  info[:title] = ask_question(:title,true)
  info[:dashed_title] = info[:title].gsub(/\s/,'-').gsub(/[^A-Za-z0-9_-]/,'').downcase
  details.each { |question, _answer| details[question] = ask_question(question,true) }
  info[:details] = details
  info[:description] = ask_question(:description)
  proceed = [ask_question('Is all of the information above correct?[yes/no]')[0].downcase == 'y', ask_question('Are all of your photos staged? [yes/no]') == 'y']
  if proceed?(proceed)
    stage_photos(info[:dashed_title])
    write_post(info)
  else
    puts 'Let\'s try that again.'
    add_posting
  end
end

def proceed?(arr)
  arr.all?
end

def ask_question(question,confirm=false)
  answer = validate(question, Readline.readline("[#{question.to_s.colorize(:yellow)}]>> "))
  puts "\n#{"#{question}:".to_s.colorize(:green)} #{answer.to_s.colorize(:red)}\n\n" if confirm && !answer.nil?
  answer
end

def validate(question, answer)
  if [:title, :categories].include? question
    if answer.empty?
      puts "You need to have a #{question}"
      return validate(question, Readline.readline("[#{question.to_s.colorize(:yellow)}]>> "))
    end
  else
    return nil if answer.empty?
  end
  case question
  when :year
    return answer if answer.match(/^((20)|1(8|9))\d{2}(\.\d{1,2})?$/) && (answer.to_i <= Time.now.strftime('%Y').to_i + 2)
    puts 'That\'s not a valid date. Try agian.'
    ask_question(:year)
  when [:title, :make, :model].include?(question) ? question : false
    answer.gsub(/\s+/, ' ').split(' ').map { |w| w.capitalize }.join(' ')
  when :mileage
    "#{answer.gsub(/\.\d*/, '').gsub(/(k|k)/,'000').gsub(/\D/,'').reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} miles"
  when :price
    "$#{answer.gsub(/\.\d*/, '').gsub(/\D/,'').reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
  when :categories
    validate_categories(answer)
  else
    answer
  end
end

def validate_categories(categories)
  attempted_categories = categories.gsub(/,\s*/,',').split(',').map { |cat| cat.gsub(/\s/,'_') }
  if !attempted_categories.empty? && (valid_categories & attempted_categories).length == attempted_categories.length
    attempted_categories.join(' ')
  else
    puts 'Your categories aren\'t valid.'
    puts 'If you are using two or more categories, they must be seperated by a comma'
    puts "Valid categories are: " + "#{valid_categories.join(', ').gsub('_', ' ')}".colorize(:green)
    puts 'Try again'
    validate_categories(Readline.readline("[#{'categories'.colorize(:yellow)}]>> "))
  end
end

def valid_categories
  valid_categories = Dir[PROJECT_ROOT + '*'].map do |f|
    md = f.match(/\d_(.*)\.md/)
    md ? md[1] : nil
  end.compact
  valid_categories << 'unpublished'
end

def stage_photos(dashed_title)
  Dir[STAGING_DIR + '*'].each_with_index do |f,i|
    ext = f.match(/(\..*)$/)
    File.rename(f, "#{PROJECT_ROOT}images/#{dashed_title}-#{i+1}#{ext}" )
  end
end

def write_post(info)
  date_str = Time.now.strftime("%Y-%m-%d")
  new_post = "#{PROJECT_ROOT}_posts/#{date_str}-#{info[:dashed_title]}.markdown"
  content = [
    '---',
    'layout: post',
    "categories: #{info[:categories]}",
    "title: #{info[:title]}",
    "dashed_title: #{info[:dashed_title]}",
    'details:',
    "\s\sdate: #{date_str}"
  ]
  info[:details].each {|k,v| content << "\s\s#{k}: #{v}" if v }
  content << '---'
  content << info[:description]
  content_str = content.compact.join("\n")
  File.open(new_post, "w") do |file|
    file.write(content_str)
  end
end

def posts_by_category(category)
  matched_posts = []
  posts = Dir[PROJECT_ROOT + '_posts/*']
  posts.each do |post|
    match = false
    matched_posts << File.readlines(post).each_with_object({}) do |line, hash|
      if match
          md = line.match(/^(title|dashed_title):\s(.*)$/)
          hash[md[1].to_sym] = md[2] if md
      end
      match = true if line.match(/categories:\s*.*#{category}/)
    end
  end
  matched_posts.delete({})
  matched_posts
end

def select_categories
  categories = valid_categories
  categories.each_with_index { |c,i| puts "#{i+1}: #{c.colorize(:light_blue)}" }
  prompt('category', :yellow).split(',').each_with_object([]) { |i,selected| selected << categories[i.to_i - 1] }
end

def remove_post
  puts "\nWhat category is the post listed under?\n".colorize(:green)
  category = select_categories.first
  posts = posts_by_category(category)
  puts "\nWhich post would you like to remove?\n".colorize(:green)
  posts.each_with_index { |post, i| puts "#{i+1}: #{post[:title].colorize(:light_blue)}" }
  post = posts[prompt('post', :yellow).to_i - 1]
  delete_post(post[:dashed_title])
end

def delete_post(dashed_title)
  to_be_deleted = Dir[PROJECT_ROOT + "images/*"]
  to_be_deleted << Dir[PROJECT_ROOT + "_posts/*"]
  to_be_deleted.flatten.each do |path|
    File.delete(path) if path.match(dashed_title)
  end
end

def prompt(value, color)
  Readline.readline("\n[#{"#{value}".colorize(color)}]>> ")
end

def deploy_site
  %x(git -C #{PROJECT_ROOT} pull origin master)
   %x(git -C #{PROJECT_ROOT} commit -am 'Rogue commit')
   %x(git -C #{PROJECT_ROOT} push origin master)
end


def make_selection
  selection = prompt('input', :yellow).to_i
  case selection
  when 1
    add_posting
  when 2
    # edit a posting
  when 3
    remove_post
  when 4
    # add or remove photos
  when 5
    deploy_site
  else
    puts "\nI don't understand, try again.\n"
    make_selection
  end
end


make_selection
